image: registry.gitlab.com/gitlab-org/terraform-images/branches/v1-7-1-1.6:f855dbc07de8afabdbcedccc675174e56170a346

stages:
  - init
  - plan
  - build_image
  - apply

variables:
  TF_ROOT: "${CI_PROJECT_DIR}/environments/staging"
  YC_KEY_FILE: "${CI_PROJECT_DIR}/key.json"
  DOCKER_IMAGE_NAME: "$CI_REGISTRY_IMAGE:latest"

before_script:
  - apk add --update --no-cache openssh-client python3 py3-pip curl
  - python3 -m venv venv
  - source venv/bin/activate
  - curl -Lo terraform.zip https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip
  - unzip terraform.zip
  - mv terraform /usr/local/bin/
  - terraform --version
  - pip install --upgrade pip
  - pip install yandexcloud
  - echo "$YC_SERVICE_ACCOUNT_KEY" > $YC_KEY_FILE
  - export YC_SERVICE_ACCOUNT_KEY_FILE=$YC_KEY_FILE
  - export YC_CLOUD_ID=${TF_VAR_yc_cloud_id}
  - export YC_FOLDER_ID=${TF_VAR_yc_folder_id}
  - export YC_ZONE=${TF_VAR_yc_zone}
  - export TF_IN_AUTOMATION=1
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub

init:
  stage: init
  script:
    - cd $TF_ROOT
    - terraform init -input=false

plan:
  stage: plan
  script:
    - cd $TF_ROOT
    - terraform plan -var-file="terraform.tfvars" -input=false
  artifacts:
    paths:
      - $TF_ROOT/plan.out

build_image:
  stage: build_image
  image: docker:20.10.17
  services:
    - name: docker:20.10.17-dind
      alias: docker
      command: ['--host=tcp://0.0.0.0:2375']
  script:
    - docker info
    - docker version
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE_NAME .
    - docker push $DOCKER_IMAGE_NAME
    - docker images | grep $CI_REGISTRY_IMAGE

apply:
  stage: apply
  script:
    - ls -l
    - cp config.yml ${TF_ROOT}
    - cd $TF_ROOT
    - terraform apply -var-file="terraform.tfvars" -auto-approve
  artifacts:
    paths:
      - $TF_ROOT/terraform.tfstate

