import yfinance as yf
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

import config2 as cfg

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∞–∫—Ü–∏–π
symbols = ["AAPL", "MSFT"]

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–π
keyboard_start = types.InlineKeyboardMarkup()
for symbol in symbols:
    keyboard_start.add(types.InlineKeyboardButton(text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {symbol} ‚ùì", callback_data=f"get_stock_info_{symbol}"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_name = message.from_user.full_name
    if not user_name:
        user_name = message.from_user.username
    
    # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = 'https://s.rbk.ru/v1_companies_s3/resized/960xH/media/company_press_release_image/e01f81e9-a2a4-475d-ae45-ec6140822bfe.jpg'
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
    await bot.send_photo(
        message.from_user.id,
        photo=image_url,
        caption=f"–ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>! –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤! üöÄ",
        reply_markup=keyboard_start,
        parse_mode='HTML'  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä—É HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    )

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_stock_info(message: types.Message, symbol: str):
    data = yf.download(symbol, period="1mo")
    if not data.empty:
        close_prices = data["Close"]
        volumes = data["Volume"]
        
        info_message = f"–¶–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ({symbol}):\n{close_prices}\n\n–û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ({symbol}):\n{volumes}"
        await message.answer(info_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É –∂–µ —Å–∞–º—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∞–∫—Ü–∏—é:", reply_markup=keyboard_start)
    else:
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏ {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('get_stock_info_'))
async def process_callback_stock(callback_query: types.CallbackQuery):
    symbol = callback_query.data.replace('get_stock_info_', '')  # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ –∏–∑ callback_data
    await send_stock_info(callback_query.message, symbol)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)